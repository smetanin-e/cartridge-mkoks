import { NextRequest, NextResponse } from 'next/server';
import { validateRefreshToken } from './shared/services/auth/validate-refresh-token';
import { generateAccessToken } from './shared/services/auth/token-sevice';
import { setAccessTokenCookie } from './shared/lib/auth/set-access-token-cookie';
import jwt from 'jsonwebtoken';

export async function middleware(req: NextRequest) {
  console.log('üí° middleware start');
  const url = req.nextUrl.clone();
  const accessToken = req.cookies.get('access_token')?.value;
  const refreshToken = req.cookies.get('refresh_token')?.value;

  if (!accessToken && !refreshToken) {
    url.pathname = '/';
    return NextResponse.redirect(url);
  }

  if (accessToken) {
    try {
      jwt.verify(accessToken, process.env.JWT_SECRET!);
      return NextResponse.next();
    } catch (error) {}
  }

  if (refreshToken) {
    try {
      const user = await validateRefreshToken(refreshToken);
      if (!user) {
        throw new Error('Refresh —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      }
      const newAccess = await generateAccessToken({ userId: user.id, role: user.role });
      const res = NextResponse.redirect(req.nextUrl);
      setAccessTokenCookie(res, newAccess, 60 * 15); // 15 –º–∏–Ω—É—Ç
      return res;
    } catch (error) {
      url.pathname = '/';
      return NextResponse.redirect(url);
    }
  }

  console.log('‚úÖ  middleware end');
  // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Üí –Ω–µ—Ç access –∏ –Ω–µ—Ç refresh

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/replacement/:path*',
    '/admin/:path*',
    '/service-return/:path*',
    '/service-batch/:path*',
  ],
};
